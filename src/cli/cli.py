#!/usr/bin/env python3
"""
CLI dla Tesla Controller
Interfejs wiersza polece≈Ñ do kontrolowania pojazdu Tesla
"""

import click
import sys
from rich.console import Console
from rich.prompt import Prompt, Confirm
from src.core.tesla_controller import TeslaController, ChargeSchedule

console = Console()

@click.group()
@click.option('--email', '-e', help='Adres email konta Tesla')
@click.option('--cache-file', '-c', help='≈öcie≈ºka do pliku cache')
@click.pass_context
def cli(ctx, email, cache_file):
    """Tesla Controller - Program do kontrolowania pojazdu Tesla"""
    ctx.ensure_object(dict)
    
    try:
        controller = TeslaController(email=email, cache_file=cache_file)
        if not controller.connect():
            console.print("[red]Nie uda≈Ço siƒô po≈ÇƒÖczyƒá z Tesla API.[/red]")
            sys.exit(1)
        ctx.obj['controller'] = controller
    except Exception as e:
        console.print(f"[red]B≈ÇƒÖd inicjalizacji: {e}[/red]")
        sys.exit(1)

@cli.command()
@click.pass_context
def status(ctx):
    """Wy≈õwietla status pojazdu"""
    controller = ctx.obj['controller']
    controller.display_vehicle_status()

@cli.command()
@click.pass_context
def quick_status(ctx):
    """Wy≈õwietla szybki status pojazdu bez budzenia (format: STATUS | BATTERY | CHARGING | LOCATION)"""
    controller = ctx.obj['controller']
    quick_status = controller.get_quick_status()
    console.print(f"[bold cyan]Szybki status:[/bold cyan] {quick_status}")

@cli.command()
@click.pass_context
def vehicles(ctx):
    """Wy≈õwietla listƒô dostƒôpnych pojazd√≥w"""
    controller = ctx.obj['controller']
    controller.list_vehicles()

@cli.command()
@click.argument('index', type=int)
@click.pass_context
def select(ctx, index):
    """Wybiera pojazd do kontrolowania (indeks 1-based)"""
    controller = ctx.obj['controller']
    if controller.select_vehicle(index - 1):
        console.print(f"[green]Wybrano pojazd #{index}[/green]")

@cli.command()
@click.pass_context
def wake(ctx):
    """Budzi pojazd"""
    controller = ctx.obj['controller']
    controller.wake_up_vehicle()

@cli.command(name='check-auth')
@click.pass_context
def check_auth(ctx):
    """Sprawdza stan autoryzacji Tesla API"""
    controller = ctx.obj['controller']
    if hasattr(controller, 'check_authorization'):
        if controller.check_authorization():
            console.print("\n[green]üéâ Autoryzacja Tesla API dzia≈Ça prawid≈Çowo![/green]")
        else:
            console.print("\n[red]‚ö†Ô∏è  Wykryto problemy z autoryzacjƒÖ Tesla API[/red]")
            console.print("[yellow]Uruchom 'python3 generate_token.py' aby naprawiƒá autoryzacjƒô[/yellow]")
    else:
        console.print("[red]‚ùå Funkcja sprawdzania autoryzacji niedostƒôpna[/red]")

@cli.command()
@click.argument('limit', type=int)
@click.pass_context
def set_limit(ctx, limit):
    """Ustawia limit ≈Çadowania baterii (50-100%)"""
    controller = ctx.obj['controller']
    controller.set_charge_limit(limit)

@cli.command()
@click.argument('amps', type=int)
@click.pass_context
def set_amps(ctx, amps):
    """Ustawia prƒÖd ≈Çadowania w amperach"""
    controller = ctx.obj['controller']
    controller.set_charging_amps(amps)



@cli.command()
@click.option('--start-time', '-s', help='Czas rozpoczƒôcia ≈Çadowania (HH:MM)')
@click.option('--end-time', '-e', help='Czas zako≈Ñczenia ≈Çadowania (HH:MM)')
@click.option('--days', '-d', default='All', help='Dni tygodnia (np. "All", "Weekdays", "Monday,Tuesday")')
@click.option('--enable/--disable', default=True, help='W≈ÇƒÖcz/wy≈ÇƒÖcz harmonogram ≈Çadowania')
@click.pass_context
def schedule_charge(ctx, start_time, end_time, days, enable):
    """
    Ustawia zaplanowane ≈Çadowanie z opcjonalnym czasem rozpoczƒôcia i zako≈Ñczenia
    
    Przyk≈Çady:
    - schedule-charge --start-time 02:00                 # Tylko czas rozpoczƒôcia
    - schedule-charge --end-time 07:00                   # Tylko czas zako≈Ñczenia  
    - schedule-charge --start-time 23:00 --end-time 07:00  # Pe≈Çne okno czasowe
    - schedule-charge --start-time 02:00 --days Weekdays   # Tylko dni robocze
    """
    controller = ctx.obj['controller']
    
    # Sprawd≈∫ czy podano przynajmniej jeden czas
    if not start_time and not end_time:
        console.print("[red]B≈ÇƒÖd: Musisz podaƒá przynajmniej --start-time lub --end-time[/red]")
        console.print("[blue]Przyk≈Çady:[/blue]")
        console.print("  schedule-charge --start-time 02:00")
        console.print("  schedule-charge --end-time 07:00") 
        console.print("  schedule-charge --start-time 23:00 --end-time 07:00")
        return
    
    # Stw√≥rz harmonogram ≈Çadowania
    schedule = ChargeSchedule(
        days_of_week=days,
        enabled=enable,
        one_time=False
    )
    
    # Lokalizacja zostanie automatycznie ustawiona w add_charge_schedule()
    # za pomocƒÖ get_vehicle_location() - u≈ºyje lokalizacji pojazdu lub domy≈õlnej z .env
    
    # Ustaw czas rozpoczƒôcia
    if start_time:
        schedule.start_enabled = True
        schedule.start_time = controller.time_to_minutes(start_time)
        console.print(f"[green]Czas rozpoczƒôcia: {start_time}[/green]")
    
    # Ustaw czas zako≈Ñczenia
    if end_time:
        schedule.end_enabled = True
        schedule.end_time = controller.time_to_minutes(end_time)
        console.print(f"[green]Czas zako≈Ñczenia: {end_time}[/green]")
    
    # Wy≈õwietl informacje o harmonogramie
    console.print(f"[blue]Dni tygodnia: {days}[/blue]")
    console.print(f"[blue]Status: {'W≈ÇƒÖczony' if enable else 'Wy≈ÇƒÖczony'}[/blue]")
    
    # Dodaj harmonogram
    if controller.add_charge_schedule(schedule):
        console.print("[green]‚úì Harmonogram ≈Çadowania zosta≈Ç dodany pomy≈õlnie![/green]")
        
        # Poka≈º zaktualizowanƒÖ listƒô harmonogram√≥w
        console.print("\n[yellow]Aktualne harmonogramy:[/yellow]")
        controller.display_charge_schedules()
    else:
        console.print("[red]‚úó B≈ÇƒÖd podczas dodawania harmonogramu ≈Çadowania[/red]")

@cli.command()
@click.pass_context
def schedules(ctx):
    """Wy≈õwietla harmonogramy ≈Çadowania"""
    controller = ctx.obj['controller']
    controller.display_charge_schedules()

@cli.command()
@click.option('--start-time', '-s', help='Czas rozpoczƒôcia (HH:MM)')
@click.option('--end-time', '-e', help='Czas zako≈Ñczenia (HH:MM)')
@click.option('--days', '-d', default='All', help='Dni tygodnia (np. "Monday,Tuesday" lub "All" lub "Weekdays")')
@click.option('--lat', type=float, default=0.0, help='Szeroko≈õƒá geograficzna')
@click.option('--lon', type=float, default=0.0, help='D≈Çugo≈õƒá geograficzna')
@click.option('--one-time', is_flag=True, help='Harmonogram jednorazowy')
@click.pass_context
def add_schedule(ctx, start_time, end_time, days, lat, lon, one_time):
    """Dodaje nowy harmonogram ≈Çadowania"""
    controller = ctx.obj['controller']
    
    schedule = ChargeSchedule(
        days_of_week=days,
        lat=lat,
        lon=lon,
        one_time=one_time
    )
    
    if start_time:
        schedule.start_enabled = True
        schedule.start_time = controller.time_to_minutes(start_time)
    
    if end_time:
        schedule.end_enabled = True
        schedule.end_time = controller.time_to_minutes(end_time)
    
    controller.add_charge_schedule(schedule)

@cli.command()
@click.argument('schedule_id', type=int)
@click.pass_context
def remove_schedule(ctx, schedule_id):
    """Usuwa harmonogram ≈Çadowania o podanym ID"""
    controller = ctx.obj['controller']
    controller.remove_charge_schedule(schedule_id)

@cli.command()
@click.option('--confirm', is_flag=True, help='Potwierd≈∫ usuniƒôcie bez pytania')
@click.pass_context
def remove_all_schedules(ctx, confirm):
    """Usuwa wszystkie harmonogramy ≈Çadowania"""
    controller = ctx.obj['controller']
    
    if not confirm:
        if not Confirm.ask("[red]Czy na pewno chcesz usunƒÖƒá WSZYSTKIE harmonogramy ≈Çadowania?[/red]"):
            console.print("[yellow]Operacja anulowana.[/yellow]")
            return
    
    controller.remove_all_charge_schedules()

@cli.command()
@click.pass_context
def interactive(ctx):
    """Tryb interaktywny"""
    controller = ctx.obj['controller']
    
    console.print("[bold blue]Tesla Controller - Tryb Interaktywny[/bold blue]")
    console.print("Dostƒôpne komendy:")
    console.print("1. Status pojazdu")
    console.print("2. Lista pojazd√≥w")
    console.print("3. Wybierz pojazd")
    console.print("4. Obud≈∫ pojazd")
    console.print("5. Ustaw limit ≈Çadowania")
    console.print("6. Ustaw prƒÖd ≈Çadowania")
    console.print("7. Zaplanuj ≈Çadowanie")
    console.print("8. Poka≈º harmonogramy")
    console.print("9. Dodaj harmonogram")
    console.print("10. Usu≈Ñ harmonogram")
    console.print("11. Usu≈Ñ wszystkie harmonogramy")
    console.print("0. Wyj≈õcie")
    
    while True:
        try:
            choice = Prompt.ask("\nWybierz opcjƒô", choices=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11'])
            
            if choice == '0':
                console.print("[yellow]Do widzenia![/yellow]")
                break
            elif choice == '1':
                controller.display_vehicle_status()
            elif choice == '2':
                controller.list_vehicles()
            elif choice == '3':
                controller.list_vehicles()
                index = int(Prompt.ask("Podaj numer pojazdu")) - 1
                controller.select_vehicle(index)
            elif choice == '4':
                controller.wake_up_vehicle()
            elif choice == '5':
                limit = int(Prompt.ask("Podaj limit ≈Çadowania (50-100%)", default="80"))
                controller.set_charge_limit(limit)
            elif choice == '6':
                amps = int(Prompt.ask("Podaj prƒÖd ≈Çadowania (A)", default="16"))
                controller.set_charging_amps(amps)
            elif choice == '7':
                time_str = Prompt.ask("Podaj czas ≈Çadowania (HH:MM)", default="02:00")
                enable = Confirm.ask("W≈ÇƒÖczyƒá zaplanowane ≈Çadowanie?", default=True)
                controller.set_scheduled_charging(time_str, enable)
            elif choice == '8':
                controller.display_charge_schedules()
            elif choice == '9':
                console.print("[yellow]Dodawanie nowego harmonogramu ≈Çadowania[/yellow]")
                
                days = Prompt.ask("Dni tygodnia", default="All", 
                                show_default=True,
                                help_text="Przyk≈Çady: 'All', 'Weekdays', 'Monday,Wednesday,Friday'")
                
                start_enabled = Confirm.ask("Ustawiƒá czas rozpoczƒôcia?", default=False)
                start_time = None
                if start_enabled:
                    start_time_str = Prompt.ask("Czas rozpoczƒôcia (HH:MM)", default="23:00")
                    start_time = controller.time_to_minutes(start_time_str)
                
                end_enabled = Confirm.ask("Ustawiƒá czas zako≈Ñczenia?", default=False)
                end_time = None
                if end_enabled:
                    end_time_str = Prompt.ask("Czas zako≈Ñczenia (HH:MM)", default="07:00")
                    end_time = controller.time_to_minutes(end_time_str)
                
                one_time = Confirm.ask("Harmonogram jednorazowy?", default=False)
                
                schedule = ChargeSchedule(
                    days_of_week=days,
                    start_enabled=start_enabled,
                    start_time=start_time,
                    end_enabled=end_enabled,
                    end_time=end_time,
                    one_time=one_time
                )
                
                controller.add_charge_schedule(schedule)
                
            elif choice == '10':
                schedule_id = int(Prompt.ask("Podaj ID harmonogramu do usuniƒôcia"))
                controller.remove_charge_schedule(schedule_id)
                
            elif choice == '11':
                controller.remove_all_charge_schedules()
                
        except KeyboardInterrupt:
            console.print("\n[yellow]Przerwano przez u≈ºytkownika.[/yellow]")
            break
        except Exception as e:
            console.print(f"[red]B≈ÇƒÖd: {e}[/red]")

if __name__ == '__main__':
    cli() 