#!/bin/bash

# Deploy script dla zoptymalizowanej wersji Tesla Monitor
# Optymalizacja koszt√≥w: Cloud Scheduler + Cloud Run scale-to-zero

set -e

echo "üöÄ === WDRO≈ªENIE ZOPTYMALIZOWANEJ WERSJI TESLA MONITOR ==="
echo "üí∞ Optymalizacja koszt√≥w: Cloud Scheduler + Cloud Run scale-to-zero"
echo ""

# Sprawd≈∫ czy PROJECT_ID jest ustawiony
if [ -z "$GOOGLE_CLOUD_PROJECT" ]; then
    echo "‚ùå B≈ÇƒÖd: Ustaw zmiennƒÖ GOOGLE_CLOUD_PROJECT"
    echo "Przyk≈Çad: export GOOGLE_CLOUD_PROJECT=your-project-id"
    exit 1
fi

PROJECT_ID=$GOOGLE_CLOUD_PROJECT
echo "üìã Projekt: $PROJECT_ID"

# Sprawd≈∫ czy gcloud jest zalogowany
if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q .; then
    echo "‚ùå B≈ÇƒÖd: Zaloguj siƒô do gcloud"
    echo "Wykonaj: gcloud auth login"
    exit 1
fi

echo "‚úÖ U≈ºytkownik zalogowany do gcloud"

# Ustaw domy≈õlny projekt
gcloud config set project $PROJECT_ID

# W≈ÇƒÖcz wymagane API
echo ""
echo "üîß W≈ÇƒÖczanie wymaganych API..."
gcloud services enable cloudbuild.googleapis.com
gcloud services enable run.googleapis.com
gcloud services enable cloudscheduler.googleapis.com
gcloud services enable secretmanager.googleapis.com
gcloud services enable storage.googleapis.com
gcloud services enable firestore.googleapis.com
echo "‚úÖ API w≈ÇƒÖczone"

# Sprawd≈∫ czy sekrety istniejƒÖ
echo ""
echo "üîê Sprawdzanie sekret√≥w..."
REQUIRED_SECRETS=(
    "tesla-client-id"
    "tesla-client-secret"
    "tesla-refresh-token"
    "tesla-private-key"
    "OFF_PEAK_CHARGE_API_KEY"
)

for secret in "${REQUIRED_SECRETS[@]}"; do
    if gcloud secrets describe $secret >/dev/null 2>&1; then
        echo "‚úÖ Sekret '$secret' istnieje"
    else
        echo "‚ùå Sekret '$secret' nie istnieje"
        echo "üí° Utw√≥rz sekret: gcloud secrets create $secret --data-file=-"
        exit 1
    fi
done

# Buduj i wdra≈ºaj obraz
echo ""
echo "üèóÔ∏è Budowanie obrazu Docker..."
gcloud builds submit --tag gcr.io/$PROJECT_ID/tesla-monitor:latest .

# Wdra≈ºaj Cloud Run z optymalizacjƒÖ koszt√≥w
echo ""
echo "üöÄ Wdra≈ºanie Cloud Run (tryb zoptymalizowany)..."

# ZastƒÖp YOUR_PROJECT_ID w konfiguracji
sed "s/YOUR_PROJECT_ID/$PROJECT_ID/g" cloud-run-service-optimized.yaml > cloud-run-service-optimized-filled.yaml

# Wdra≈ºaj us≈Çugƒô
gcloud run services replace cloud-run-service-optimized-filled.yaml --region=europe-west1

# Pobierz URL us≈Çugi
SERVICE_URL=$(gcloud run services describe tesla-monitor --region=europe-west1 --format="value(status.url)")
echo "‚úÖ Cloud Run wdro≈ºony: $SERVICE_URL"

# Ustaw uprawnienia dla Cloud Scheduler
echo ""
echo "üîê Konfiguracja uprawnie≈Ñ dla Cloud Scheduler..."

# Utw√≥rz service account dla Cloud Scheduler (je≈õli nie istnieje)
if ! gcloud iam service-accounts describe tesla-scheduler@$PROJECT_ID.iam.gserviceaccount.com >/dev/null 2>&1; then
    gcloud iam service-accounts create tesla-scheduler \
        --display-name="Tesla Monitor Scheduler" \
        --description="Service account for Cloud Scheduler to invoke Tesla Monitor"
fi

# Nadaj uprawnienia
gcloud run services add-iam-policy-binding tesla-monitor \
    --member="serviceAccount:tesla-scheduler@$PROJECT_ID.iam.gserviceaccount.com" \
    --role="roles/run.invoker" \
    --region=europe-west1

echo "‚úÖ Uprawnienia skonfigurowane"

# Konfiguruj Cloud Scheduler jobs
echo ""
echo "üìÖ Konfiguracja Cloud Scheduler jobs..."

# ZastƒÖp placeholders w konfiguracji scheduler
sed -e "s/YOUR_PROJECT_ID/$PROJECT_ID/g" -e "s|YOUR_CLOUD_RUN_URL|$SERVICE_URL|g" cloud-scheduler-jobs.yaml > cloud-scheduler-jobs-filled.yaml

# Utw√≥rz region dla Cloud Scheduler je≈õli nie istnieje
gcloud app create --region=europe-west1 2>/dev/null || true

# Usu≈Ñ istniejƒÖce jobs (je≈õli istniejƒÖ)
gcloud scheduler jobs delete tesla-monitor-day-cycle --location=europe-west1 --quiet 2>/dev/null || true
gcloud scheduler jobs delete tesla-monitor-night-cycle --location=europe-west1 --quiet 2>/dev/null || true
gcloud scheduler jobs delete tesla-monitor-midnight-wake --location=europe-west1 --quiet 2>/dev/null || true

# Utw√≥rz nowe jobs
echo "üìÖ Tworzenie harmonogramu dziennego (co 15 min, 07:00-22:59 UTC)..."
gcloud scheduler jobs create http tesla-monitor-day-cycle \
    --location=europe-west1 \
    --schedule="0 7-22 * * *" \
    --time-zone="Europe/Warsaw" \
    --uri="$SERVICE_URL/run-cycle" \
    --http-method=POST \
    --headers="Content-Type=application/json" \
    --message-body='{"trigger":"cloud_scheduler_day","action":"monitoring_cycle","hours":"07:00-22:00_Warsaw"}' \
    --oidc-service-account-email="tesla-scheduler@$PROJECT_ID.iam.gserviceaccount.com" \
    --max-retry-attempts=2 \
    --max-retry-duration=300s \
    --min-backoff-duration=5s \
    --max-backoff-duration=60s \
    --attempt-deadline=60s \
    --description="Tesla Monitor - dzienny cykl monitorowania (07:00-22:00 czasu warszawskiego)"

echo "üìÖ Tworzenie harmonogramu nocnego cyklu (23:00-06:00 Europe/Warsaw)..."
gcloud scheduler jobs create http tesla-monitor-night-cycle \
    --location=europe-west1 \
    --schedule="0 23,0-6 * * *" \
    --time-zone="Europe/Warsaw" \
    --uri="$SERVICE_URL/run-cycle" \
    --http-method=POST \
    --headers="Content-Type=application/json" \
    --message-body='{"trigger":"cloud_scheduler_night","action":"monitoring_cycle","hours":"23:00-06:00_Warsaw"}' \
    --oidc-service-account-email="tesla-scheduler@$PROJECT_ID.iam.gserviceaccount.com" \
    --max-retry-attempts=2 \
    --max-retry-duration=300s \
    --min-backoff-duration=10s \
    --max-backoff-duration=30s \
    --attempt-deadline=60s \
    --description="Tesla Monitor - nocny cykl monitorowania (co 60 min)"

echo "üìÖ Tworzenie harmonogramu nocnego wybudzenia (00:00 Europe/Warsaw)..."
gcloud scheduler jobs create http tesla-monitor-midnight-wake \
    --location=europe-west1 \
    --schedule="0 0 * * *" \
    --time-zone="Europe/Warsaw" \
    --uri="$SERVICE_URL/run-midnight-wake" \
    --http-method=POST \
    --headers="Content-Type=application/json" \
    --message-body='{"trigger":"cloud_scheduler_midnight","action":"wake_vehicle","time":"00:00_Warsaw"}' \
    --oidc-service-account-email="tesla-scheduler@$PROJECT_ID.iam.gserviceaccount.com" \
    --max-retry-attempts=2 \
    --max-retry-duration=180s \
    --min-backoff-duration=10s \
    --max-backoff-duration=60s \
    --attempt-deadline=120s \
    --description="Tesla Monitor - nocne wybudzenie pojazdu o 00:00 czasu warszawskiego"

echo "‚úÖ Cloud Scheduler jobs utworzone"

# Wyczy≈õƒá pliki tymczasowe
rm -f cloud-run-service-optimized-filled.yaml cloud-scheduler-jobs-filled.yaml

echo ""
echo "üéâ === WDRO≈ªENIE ZAKO≈ÉCZONE POMY≈öLNIE ==="
echo ""
echo "üí∞ OPTYMALIZACJA KOSZT√ìW AKTYWNA:"
echo "   ‚úÖ Cloud Run skaluje do zera miƒôdzy wywo≈Çaniami"
echo "   ‚úÖ Harmonogram zarzƒÖdzany przez Cloud Scheduler"
echo "   ‚úÖ Brak sta≈Çych koszt√≥w gdy aplikacja nie jest u≈ºywana"
echo ""
echo "üìä HARMONOGRAM DZIA≈ÅANIA:"
echo "   üåÖ Dzie≈Ñ (07:00-22:00 Warsaw): co godzinƒô"
echo "   üåô Noc (23:00-06:00 Warsaw): co godzinƒô"
echo "   üöó Wybudzenie pojazdu: 00:00 czasu warszawskiego (codziennie)"
echo ""
echo "üîó ENDPOINTS:"
echo "   Health check: $SERVICE_URL/health"
echo "   Manual cycle: $SERVICE_URL/run-cycle"
echo "   Midnight wake: $SERVICE_URL/run-midnight-wake"
echo "   Reset state: $SERVICE_URL/reset"
echo "   Reset schedules: $SERVICE_URL/reset-tesla-schedules"
echo ""
echo "üìÖ ZARZƒÑDZANIE HARMONOGRAMEM:"
echo "   gcloud scheduler jobs list --location=europe-west1"
echo "   gcloud scheduler jobs pause tesla-monitor-day-cycle --location=europe-west1"
echo "   gcloud scheduler jobs resume tesla-monitor-day-cycle --location=europe-west1"
echo ""
echo "üîç MONITORING:"
echo "   gcloud run services logs read tesla-monitor --region=europe-west1"
echo "   gcloud scheduler jobs logs list tesla-monitor-day-cycle --location=europe-west1"
echo ""
echo "üí° TRYB CONTINUOUS (wy≈ºsze koszty):"
echo "   Ustaw CONTINUOUS_MODE=true w Cloud Run environment variables"
echo ""
echo "üéØ Spodziewana redukcja koszt√≥w: >95% w por√≥wnaniu z trybem continuous" 