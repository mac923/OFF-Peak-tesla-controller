#!/usr/bin/env python3
"""
Test rzeczywistych funkcji zarzƒÖdzania harmonogramami Tesla
Sprawdza czy funkcje w tesla_controller.py dzia≈ÇajƒÖ poprawnie
"""

import os
import sys
from dotenv import load_dotenv

# ≈Åadowanie zmiennych ≈õrodowiskowych
load_dotenv()

# Import naszych modu≈Ç√≥w
try:
    from tesla_controller import TeslaController, ChargeSchedule
    print("‚úÖ Modu≈Çy Tesla Controller za≈Çadowane pomy≈õlnie")
except Exception as e:
    print(f"‚ùå B≈ÇƒÖd importu Tesla Controller: {e}")
    sys.exit(1)

class RealTeslaScheduleTest:
    """Test rzeczywistych funkcji harmonogram√≥w Tesla"""
    
    def __init__(self):
        """Inicjalizacja testu"""
        print("üîó Inicjalizacja po≈ÇƒÖczenia z Tesla...")
        
        try:
            self.tesla_controller = TeslaController()
            if self.tesla_controller.connect():
                print("‚úÖ Po≈ÇƒÖczono z Tesla Fleet API")
                
                # Sprawd≈∫ czy mamy pojazdy
                vehicles = self.tesla_controller.get_vehicles()
                if vehicles:
                    print(f"üöó Znaleziono {len(vehicles)} pojazd√≥w")
                    for vehicle in vehicles:
                        print(f"   ‚Ä¢ {vehicle.get('display_name', 'Unnamed')} (VIN: {vehicle.get('vin', 'Unknown')[:8]}...)")
                else:
                    print("‚ö†Ô∏è  Brak pojazd√≥w - test ograniczony")
                
                self.connected = True
            else:
                print("‚ùå Nie uda≈Ço siƒô po≈ÇƒÖczyƒá z Tesla")
                self.connected = False
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd po≈ÇƒÖczenia Tesla: {e}")
            self.connected = False
    
    def test_get_charge_schedules(self):
        """Test pobierania harmonogram√≥w ≈Çadowania"""
        print(f"\nüìã TEST: Pobieranie harmonogram√≥w ≈Çadowania")
        print("-" * 60)
        
        if not self.connected:
            print("‚ö†Ô∏è  Pomijam test - brak po≈ÇƒÖczenia Tesla")
            return False
        
        try:
            print("üîç Pobieranie harmonogram√≥w z pojazdu...")
            schedules = self.tesla_controller.get_charge_schedules()
            
            if schedules:
                print(f"‚úÖ Znaleziono {len(schedules)} harmonogram√≥w:")
                for i, schedule in enumerate(schedules, 1):
                    print(f"   Harmonogram {i}:")
                    print(f"     ID: {schedule.get('id', 'N/A')}")
                    print(f"     Start: {schedule.get('start_time', 'N/A')}")
                    print(f"     End: {schedule.get('end_time', 'N/A')}")
                    print(f"     Enabled: {schedule.get('enabled', 'N/A')}")
                    print(f"     Days: {schedule.get('days_of_week', 'N/A')}")
                    print("     ---")
                return True
            else:
                print("‚ÑπÔ∏è  Brak harmonogram√≥w w poje≈∫dzie")
                return True
                
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd pobierania harmonogram√≥w: {e}")
            return False
    
    def test_charge_schedule_creation(self):
        """Test tworzenia obiektu harmonogramu"""
        print(f"\n‚ûï TEST: Tworzenie harmonogramu ≈Çadowania")
        print("-" * 60)
        
        try:
            # Tworzenie testowego harmonogramu
            schedule = ChargeSchedule(
                location_latitude=52.334215,  # Warszawa
                location_longitude=20.937516,
                start_time_minutes=23 * 60,   # 23:00
                end_time_minutes=6 * 60,      # 06:00
                charge_current_a=32,
                days_of_week="all"
            )
            
            print(f"‚úÖ Utworzono harmonogram:")
            print(f"   Lokalizacja: {schedule.location_latitude}, {schedule.location_longitude}")
            print(f"   Start: {schedule.start_time_minutes} min ({schedule.start_time_minutes // 60:02d}:{schedule.start_time_minutes % 60:02d})")
            print(f"   End: {schedule.end_time_minutes} min ({schedule.end_time_minutes // 60:02d}:{schedule.end_time_minutes % 60:02d})")
            print(f"   PrƒÖd: {schedule.charge_current_a}A")
            print(f"   Dni: {schedule.days_of_week}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd tworzenia harmonogramu: {e}")
            return False
    
    def test_add_charge_schedule_dry_run(self):
        """Test dodawania harmonogramu (dry run - bez rzeczywistego wys≈Çania)"""
        print(f"\nüß™ TEST: Dodawanie harmonogramu (dry run)")
        print("-" * 60)
        
        if not self.connected:
            print("‚ö†Ô∏è  Pomijam test - brak po≈ÇƒÖczenia Tesla")
            return False
        
        try:
            # Tworzenie testowego harmonogramu
            test_schedule = ChargeSchedule(
                location_latitude=52.334215,
                location_longitude=20.937516,
                start_time_minutes=2 * 60,    # 02:00
                end_time_minutes=6 * 60,      # 06:00
                charge_current_a=16,
                days_of_week="weekdays"
            )
            
            print(f"üìù Przygotowano harmonogram testowy:")
            print(f"   Czas: 02:00-06:00")
            print(f"   PrƒÖd: 16A")
            print(f"   Dni: weekdays")
            
            # Sprawd≈∫ czy funkcja istnieje
            if hasattr(self.tesla_controller, 'add_charge_schedule'):
                print(f"‚úÖ Funkcja add_charge_schedule dostƒôpna")
                
                # UWAGA: Nie wywo≈Çujemy rzeczywistej funkcji w te≈õcie!
                print(f"‚ÑπÔ∏è  Dry run - nie wysy≈Çam rzeczywistego harmonogramu do pojazdu")
                print(f"üí° W produkcji wywo≈Ça≈Çoby: tesla_controller.add_charge_schedule(test_schedule)")
                
                return True
            else:
                print(f"‚ùå Funkcja add_charge_schedule nie znaleziona")
                return False
                
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd w te≈õcie dodawania harmonogramu: {e}")
            return False
    
    def test_location_check(self):
        """Test sprawdzania lokalizacji pojazdu"""
        print(f"\nüìç TEST: Sprawdzanie lokalizacji pojazdu")
        print("-" * 60)
        
        if not self.connected:
            print("‚ö†Ô∏è  Pomijam test - brak po≈ÇƒÖczenia Tesla")
            return False
        
        try:
            print("üîç Sprawdzanie lokalizacji pojazdu...")
            
            # Sprawd≈∫ czy mamy funkcjƒô sprawdzania lokalizacji
            if hasattr(self.tesla_controller, 'get_vehicle_location_status'):
                location_status = self.tesla_controller.get_vehicle_location_status()
                print(f"‚úÖ Status lokalizacji: {location_status}")
                return True
            else:
                print("‚ÑπÔ∏è  Funkcja sprawdzania lokalizacji nie jest bezpo≈õrednio dostƒôpna")
                
                # Spr√≥buj przez get_vehicle_data
                vehicle_data = self.tesla_controller.get_current_vehicle_data()
                if vehicle_data:
                    drive_state = vehicle_data.get('drive_state', {})
                    latitude = drive_state.get('latitude')
                    longitude = drive_state.get('longitude')
                    
                    if latitude and longitude:
                        print(f"‚úÖ Lokalizacja pojazdu: {latitude:.6f}, {longitude:.6f}")
                        
                        # Sprawd≈∫ czy jest w domu (przyk≈Çadowe wsp√≥≈Çrzƒôdne)
                        home_lat = 52.334215
                        home_lon = 20.937516
                        home_radius = 0.15  # km
                        
                        distance = ((latitude - home_lat) ** 2 + (longitude - home_lon) ** 2) ** 0.5
                        is_home = distance <= home_radius
                        
                        print(f"üìè Odleg≈Ço≈õƒá od domu: {distance:.3f} km")
                        print(f"üè† W domu: {'TAK' if is_home else 'NIE'}")
                        return True
                    else:
                        print("‚ÑπÔ∏è  Brak danych lokalizacji pojazdu")
                        return True
                else:
                    print("‚ö†Ô∏è  Nie uda≈Ço siƒô pobraƒá danych pojazdu")
                    return False
                
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd sprawdzania lokalizacji: {e}")
            return False
    
    def run_all_tests(self):
        """Uruchamia wszystkie testy"""
        print("üß™ URUCHAMIANIE TEST√ìW RZECZYWISTYCH FUNKCJI TESLA")
        print("=" * 80)
        
        test_results = []
        
        # Test 1: Pobieranie harmonogram√≥w
        result1 = self.test_get_charge_schedules()
        test_results.append(("Pobieranie harmonogram√≥w", result1))
        
        # Test 2: Tworzenie harmonogramu
        result2 = self.test_charge_schedule_creation()
        test_results.append(("Tworzenie harmonogramu", result2))
        
        # Test 3: Dodawanie harmonogramu (dry run)
        result3 = self.test_add_charge_schedule_dry_run()
        test_results.append(("Dodawanie harmonogramu (dry run)", result3))
        
        # Test 4: Sprawdzanie lokalizacji
        result4 = self.test_location_check()
        test_results.append(("Sprawdzanie lokalizacji", result4))
        
        # Podsumowanie
        print(f"\nüìä PODSUMOWANIE TEST√ìW")
        print("=" * 80)
        
        passed = 0
        total = len(test_results)
        
        for test_name, result in test_results:
            status = "‚úÖ PASSED" if result else "‚ùå FAILED"
            print(f"   {test_name}: {status}")
            if result:
                passed += 1
        
        print(f"\nüéØ WYNIK: {passed}/{total} test√≥w przesz≈Ço pomy≈õlnie")
        
        if passed == total:
            print("üéâ WSZYSTKIE TESTY PRZESZ≈ÅY!")
            print("üí° Funkcje Tesla Controller sƒÖ gotowe do automatycznego zarzƒÖdzania harmonogramami")
        else:
            print("‚ö†Ô∏è  Niekt√≥re testy nie przesz≈Çy - sprawd≈∫ b≈Çƒôdy powy≈ºej")
        
        return passed == total

if __name__ == "__main__":
    print("üîß URUCHAMIANIE TEST√ìW RZECZYWISTYCH FUNKCJI TESLA CONTROLLER")
    print()
    
    # Sprawd≈∫ czy sƒÖ wymagane zmienne ≈õrodowiskowe
    required_vars = ['TESLA_CLIENT_ID', 'TESLA_CLIENT_SECRET', 'TESLA_DOMAIN']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print("‚ùå Brak wymaganych zmiennych ≈õrodowiskowych:")
        for var in missing_vars:
            print(f"   ‚Ä¢ {var}")
        print("\nüí° Ustaw zmienne w pliku .env lub Google Cloud Secret Manager")
        sys.exit(1)
    
    # Uruchomienie test√≥w
    test_suite = RealTeslaScheduleTest()
    success = test_suite.run_all_tests()
    
    print(f"\n" + "=" * 80)
    if success:
        print("üéØ WYNIK: ‚úÖ WSZYSTKIE TESTY ZAKO≈ÉCZONE SUKCESEM")
        print("üöó Tesla Controller jest gotowy do automatycznego zarzƒÖdzania harmonogramami!")
    else:
        print("üéØ WYNIK: ‚ö†Ô∏è  NIEKT√ìRE TESTY NIEUDANE")
        print("üí° Sprawd≈∫ konfiguracjƒô Tesla Fleet API i po≈ÇƒÖczenie z pojazdem")
    
    print("\nüìñ Aby zobaczyƒá funkcjonalno≈õƒá w akcji, sprawd≈∫ logi Google Cloud gdy pojazd bƒôdzie gotowy do ≈Çadowania w domu")
    print("üîó Logs: gcloud logs tail --service=tesla-monitor --region=europe-west1 --follow") 