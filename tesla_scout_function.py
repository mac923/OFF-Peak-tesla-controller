#!/usr/bin/env python3
"""
Tesla Scout Function - Lekka funkcja sprawdzajƒÖca tylko lokalizacjƒô pojazdu
Czƒô≈õƒá architektury "Scout & Worker" dla agresywnej optymalizacji koszt√≥w

ZADANIE:
- Sprawdza co 15 minut czy pojazd wr√≥ci≈Ç do domu
- Koszt wykonania: setne czƒô≈õci grosza
- Je≈õli wykryje powr√≥t do domu -> wywo≈Çuje Worker (Cloud Run)
- Przechowuje stan w Firestore dla minimalnego kosztu

ARCHITEKTURA (POPRAWIONA):
Scout Function (tania, czƒôsta) -> Worker Service (droga, rzadka)

NOWA ARCHITEKTURA TOKEN√ìW (v2):
‚ùå PROBLEM: Scout i Worker mia≈Çy niezale≈ºne systemy zarzƒÖdzania tokenami Tesla
‚úÖ ROZWIƒÑZANIE: Worker centralnie zarzƒÖdza tokenami, Scout pobiera tokeny z Worker

KORZY≈öCI:
- Brak konflikt√≥w refresh token√≥w miƒôdzy Scout i Worker
- Stabilne zarzƒÖdzanie tokenami 24h przez Worker
- Scout tylko pobiera gotowe tokeny z Worker via /get-token
- Jednolita architektura zgodna z dokumentacjƒÖ Tesla API
"""

import json
import os
import logging
import requests
import pytz
from datetime import datetime, timezone, timedelta
from typing import Optional, Dict, Any
from google.cloud import firestore
from google.cloud import secretmanager
import functions_framework
import time

# Konfiguracja logowania
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def _log_scout_status(status_data: Dict[str, Any], action: str = "check") -> None:
    """
    Loguje szczeg√≥≈Çowy status Scout w formacie: [HH:MM] üîç SCOUT - akcja - dane
    
    Args:
        status_data: Dane o stanie pojazdu 
        action: Opis akcji (np. "check", "location_change")
    """
    try:
        print(f"üîß [DEBUG] _log_scout_status wywo≈Çane z action='{action}', vehicle_state='{status_data.get('state', 'unknown')}'")
        
        # Czas warszawski w formacie [HH:MM]
        from datetime import datetime
        import pytz
        warsaw_tz = pytz.timezone('Europe/Warsaw')
        now = datetime.now(warsaw_tz)
        time_str = now.strftime("[%H:%M]")
        
        # Podstawowe dane
        vin = status_data.get('vin', 'Unknown')
        vin_short = vin[-4:] if len(vin) > 4 else vin
        vehicle_state = status_data.get('state', 'unknown')
        
        if vehicle_state == 'online':
            # Pojazd online - szczeg√≥≈Çowe informacje
            battery = status_data.get('battery_level', 0)
            charging = status_data.get('charging_state', 'Unknown')
            lat = status_data.get('latitude')
            lon = status_data.get('longitude')
            
            # Okre≈õl lokalizacjƒô
            if lat and lon:
                at_home = is_at_home(lat, lon)
                location = "HOME" if at_home else "OUTSIDE"
            else:
                location = "UNKNOWN"
            
            log_msg = f"{time_str} üîç SCOUT {action} - VIN={vin_short}, state={vehicle_state}, bateria={battery}%, ≈Çadowanie={charging}, lokalizacja={location}"
        else:
            # Pojazd offline/asleep - podstawowe informacje
            log_msg = f"{time_str} üîç SCOUT {action} - VIN={vin_short}, state={vehicle_state}, brak aktualnych danych"
        
        logger.info(log_msg)
        
        # DODATKOWO: print() dla pewno≈õci ≈ºe logi bƒôdƒÖ widoczne w Cloud Functions
        print(log_msg)
        
    except Exception as e:
        logger.error(f"B≈ÇƒÖd logowania Scout status: {e}")

# Konfiguracja
PROJECT_ID = os.environ.get('GOOGLE_CLOUD_PROJECT') or os.environ.get('GCP_PROJECT') or 'off-peak-tesla-controller'

# Fallback ze zmiennych ≈õrodowiskowych 
HOME_LATITUDE_FALLBACK = float(os.environ.get('HOME_LATITUDE', '52.334215'))
HOME_LONGITUDE_FALLBACK = float(os.environ.get('HOME_LONGITUDE', '20.937516'))
HOME_RADIUS_FALLBACK = float(os.environ.get('HOME_RADIUS', '0.03'))

# Globalne zmienne dla wsp√≥≈Çrzƒôdnych domu (pobierane z Secret Manager przy inicjalizacji)
HOME_LATITUDE = None
HOME_LONGITUDE = None
HOME_RADIUS = None

WORKER_SERVICE_URL = os.environ.get('WORKER_SERVICE_URL')

# Globalne zmienne dla cachowania
_cached_secrets = {}
_cached_access_token = None
_token_expires_at = None

def get_secret(secret_name: str) -> Optional[str]:
    """Pobiera sekret z Google Secret Manager z cachowaniem"""
    global _cached_secrets
    
    # Sprawd≈∫ cache
    if secret_name in _cached_secrets:
        return _cached_secrets[secret_name]
    
    try:
        client = secretmanager.SecretManagerServiceClient()
        name = f"projects/{PROJECT_ID}/secrets/{secret_name}/versions/latest"
        response = client.access_secret_version(request={"name": name})
        secret = response.payload.data.decode("UTF-8")
        
        # Cache sekret
        _cached_secrets[secret_name] = secret
        return secret
    except Exception as e:
        logger.error(f"‚ùå B≈ÇƒÖd pobierania sekretu {secret_name}: {e}")
        return None

def get_token_from_worker() -> Optional[str]:
    """
    NOWA ARCHITEKTURA: Pobiera token Tesla API z Worker Service (centralne zarzƒÖdzanie tokenami)
    
    RozwiƒÖzuje problem konflikt√≥w miƒôdzy Scout i Worker przy refresh token√≥w.
    Worker centralnie zarzƒÖdza tokenami Tesla API (24h wa≈ºno≈õƒá).
    """
    global _cached_access_token, _token_expires_at
    
    # Sprawd≈∫ czy mamy wa≈ºny cached token
    if _cached_access_token and _token_expires_at:
        now = datetime.now(timezone.utc)
        if now < _token_expires_at:
            logger.info("üîÑ [SCOUT] U≈ºywam cached token Tesla z Worker")
            return _cached_access_token
    
    try:
        if not WORKER_SERVICE_URL:
            logger.error("‚ùå [SCOUT] WORKER_SERVICE_URL nie jest skonfigurowany")
            logger.error("üí° Scout wymaga URL do Worker Service dla token√≥w Tesla")
            return None
        
        # Pobierz token z Worker Service
        token_url = f"{WORKER_SERVICE_URL.rstrip('/')}/get-token"
        logger.info(f"üì° [SCOUT] Pobieram token Tesla z Worker: {token_url}")
        
        response = requests.get(token_url, timeout=30)
        
        if response.status_code == 200:
            token_data = response.json()
            
            if token_data.get('status') == 'success':
                _cached_access_token = token_data.get('access_token')
                
                # Ustaw czas wyga≈õniƒôcia na podstawie informacji z Worker
                remaining_minutes = token_data.get('remaining_minutes')
                if remaining_minutes and remaining_minutes > 0:
                    # Dodaj 5% marginesu bezpiecze≈Ñstwa
                    safe_minutes = int(remaining_minutes * 0.95)
                    _token_expires_at = datetime.now(timezone.utc) + timedelta(minutes=safe_minutes)
                    logger.info(f"‚úÖ [SCOUT] Token Tesla otrzymany z Worker (wa≈ºny przez {safe_minutes} min)")
                else:
                    # Fallback - za≈Ç√≥≈º 30 minut wa≈ºno≈õci
                    _token_expires_at = datetime.now(timezone.utc) + timedelta(minutes=30)
                    logger.warning("‚ö†Ô∏è [SCOUT] Brak informacji o czasie wyga≈õniƒôcia - u≈ºywam 30min fallback")
                
                logger.info(f"üèóÔ∏è [SCOUT] Centralne zarzƒÖdzanie tokenami przez Worker (architektura poprawiona)")
                return _cached_access_token
            else:
                error_msg = token_data.get('error', 'Unknown error')
                logger.error(f"‚ùå [SCOUT] Worker nie mo≈ºe udostƒôpniƒá tokenu: {error_msg}")
                return None
                
        elif response.status_code == 500:
            try:
                error_data = response.json()
                error_msg = error_data.get('error', 'Internal server error')
                logger.error(f"‚ùå [SCOUT] Worker ma problem z tokenami Tesla: {error_msg}")
            except:
                logger.error(f"‚ùå [SCOUT] Worker ma problem z tokenami Tesla (HTTP 500)")
        else:
            logger.error(f"‚ùå [SCOUT] B≈ÇƒÖd HTTP {response.status_code} z Worker Service")
            
    except requests.exceptions.Timeout:
        logger.error("‚ùå [SCOUT] Timeout podczas pobierania tokenu z Worker")
    except requests.exceptions.ConnectionError:
        logger.error("‚ùå [SCOUT] Nie mo≈ºna po≈ÇƒÖczyƒá siƒô z Worker Service")
        logger.error(f"üí° Sprawd≈∫ czy Worker dzia≈Ça na: {WORKER_SERVICE_URL}")
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå [SCOUT] B≈ÇƒÖd sieci podczas pobierania tokenu z Worker: {e}")
    except Exception as e:
        logger.error(f"‚ùå [SCOUT] Nieoczekiwany b≈ÇƒÖd podczas pobierania tokenu z Worker: {e}")
    
    # Wyczy≈õƒá cache w przypadku b≈Çƒôdu
    _cached_access_token = None
    _token_expires_at = None
    return None


def get_tesla_access_token_fallback() -> Optional[str]:
    """
    FALLBACK: Stary system token√≥w - u≈ºywany tylko gdy Worker Service jest niedostƒôpny
    
    To jest fallback mechanism na wypadek problem√≥w z Worker Service.
    Normalnie Scout powinien u≈ºywaƒá get_token_from_worker().
    """
    global _cached_access_token, _token_expires_at
    
    logger.warning("‚ö†Ô∏è [SCOUT FALLBACK] U≈ºywam fallback mechanizmu token√≥w - Worker niedostƒôpny")
    
    # Sprawd≈∫ czy token jest wa≈ºny
    if _cached_access_token and _token_expires_at:
        now = datetime.now(timezone.utc)
        if now < _token_expires_at:
            return _cached_access_token
    
    try:
        client_id = get_secret('tesla-client-id')
        client_secret = get_secret('tesla-client-secret')
        refresh_token = get_secret('tesla-refresh-token')
        
        if not all([client_id, client_secret, refresh_token]):
            logger.error("‚ùå [SCOUT FALLBACK] Brak wymaganych sekret√≥w Tesla")
            return None
        
        # Od≈õwie≈º token bezpo≈õrednio (fallback)
        # NAPRAWKA: U≈ºywaj nowego URL Tesla Fleet API zgodnie z dokumentacjƒÖ
        url = "https://fleet-auth.prd.vn.cloud.tesla.com/oauth2/v3/token"
        data = {
            "grant_type": "refresh_token",
            "client_id": client_id,
            "client_secret": client_secret,
            "refresh_token": refresh_token,
            "audience": "https://fleet-api.prd.eu.vn.cloud.tesla.com"  # NAPRAWKA: audience dla regionu Europa
        }
        
        logger.warning("üîÑ [SCOUT FALLBACK] Pr√≥ba bezpo≈õredniego od≈õwie≈ºenia tokenu Tesla")
        response = requests.post(url, data=data, timeout=30)
        
        if response.status_code == 200:
            token_data = response.json()
            _cached_access_token = token_data['access_token']
            
            # Ustaw kr√≥tszy czas wyga≈õniƒôcia (fallback jest mniej stabilny)
            expires_in = token_data.get('expires_in', 900)  # Domy≈õlnie 15 min
            safe_seconds = int(expires_in * 0.8)  # 20% marginesu bezpiecze≈Ñstwa
            _token_expires_at = datetime.now(timezone.utc) + timedelta(seconds=safe_seconds)
            
            logger.warning(f"‚úÖ [SCOUT FALLBACK] Token otrzymany bezpo≈õrednio (wa≈ºny przez {safe_seconds//60} min)")
            logger.warning("üí° [SCOUT FALLBACK] Sprawd≈∫ dlaczego Worker Service jest niedostƒôpny")
            
            return _cached_access_token
        else:
            logger.error(f"‚ùå [SCOUT FALLBACK] B≈ÇƒÖd od≈õwie≈ºania tokenu: {response.status_code}")
            
    except Exception as e:
        logger.error(f"‚ùå [SCOUT FALLBACK] B≈ÇƒÖd fallback mechanizmu: {e}")
    
    # Wyczy≈õƒá cache w przypadku b≈Çƒôdu
    _cached_access_token = None
    _token_expires_at = None
    return None


def get_tesla_access_token_smart() -> Optional[str]:
    """
    SMART WRAPPER: Pr√≥buje Worker Service, fallback na bezpo≈õredni dostƒôp
    
    1. Pr√≥buje pobraƒá token z Worker Service (preferowane)
    2. Je≈õli Worker niedostƒôpny -> fallback na bezpo≈õredni dostƒôp
    3. Loguje wybranƒÖ strategiƒô dla debugowania
    """
    
    # KROK 1: Pr√≥buj Worker Service (preferowane)
    logger.info("üîÑ [SCOUT] Pr√≥buje centralne zarzƒÖdzanie tokenami przez Worker")
    token = get_token_from_worker()
    
    if token:
        logger.info("‚úÖ [SCOUT] U≈ºywam tokens z Worker Service (architektura docelowa)")
        return token
    
    # KROK 2: Fallback na bezpo≈õredni dostƒôp
    logger.warning("‚ö†Ô∏è [SCOUT] Worker Service niedostƒôpny - przechodzƒô na fallback")
    logger.warning("üí° [SCOUT] To mo≈ºe wskazywaƒá na problem z Worker Service")
    
    token = get_tesla_access_token_fallback()
    
    if token:
        logger.warning("‚úÖ [SCOUT] U≈ºywam fallback tokens (tymczasowo)")
        return token
    else:
        logger.error("‚ùå [SCOUT] Zar√≥wno Worker jak i fallback nie dzia≈ÇajƒÖ")
        return None

def get_vehicle_location(access_token: str) -> Optional[Dict[str, Any]]:
    """Pobiera lokalizacjƒô pojazdu z Tesla API zgodnie z best practices"""
    try:
        # KROK 1: Pobierz listƒô pojazd√≥w (nie budzi pojazdu)
        headers = {"Authorization": f"Bearer {access_token}"}
        vehicles_response = requests.get(
            "https://fleet-api.prd.eu.vn.cloud.tesla.com/api/1/vehicles",
            headers=headers,
            timeout=30
        )
        
        if vehicles_response.status_code != 200:
            logger.error(f"‚ùå B≈ÇƒÖd pobierania listy pojazd√≥w: {vehicles_response.status_code}")
            return None
        
        vehicles = vehicles_response.json().get('response', [])
        if not vehicles:
            logger.error("‚ùå Brak pojazd√≥w na koncie")
            return None
        
        vehicle = vehicles[0]  # Pierwszy pojazd
        vehicle_id = vehicle['id']
        vin = vehicle['vin']
        vehicle_state = vehicle.get('state', 'unknown')
        
        logger.info(f"üîç Stan pojazdu {vin[-4:]}: {vehicle_state}")
        
        # KROK 2: Sprawd≈∫ stan pojazdu PRZED pr√≥bƒÖ pobrania danych
        if vehicle_state == 'online':
            # Pojazd online - pobierz pe≈Çne dane (lokalizacja + bateria + szczeg√≥≈Çowe dane ≈Çadowania)
            logger.info("‚úÖ Pojazd online - pobieram dane z location_data endpoint")
            
            # FIX: U≈ºyj poprawnego formatu endpoints dla Tesla Fleet API
            # Zgodnie z testami: endpoints=location_data dzia≈Ça, kombinacje nie
            location_response = requests.get(
                f"https://fleet-api.prd.eu.vn.cloud.tesla.com/api/1/vehicles/{vehicle_id}/vehicle_data?endpoints=location_data",
                headers=headers,
                timeout=30
            )
            
            if location_response.status_code != 200:
                logger.error(f"‚ùå B≈ÇƒÖd pobierania danych pojazdu: {location_response.status_code}")
                return None
            
            data = location_response.json().get('response', {})

            # Pobierz dane lokalizacji z drive_state (po u≈ºyciu location_data endpoint)
            location_info = data.get('drive_state', {})
            
            # Osobne zapytanie dla charge_state je≈õli potrzebne
            if not location_info or 'latitude' not in location_info or 'longitude' not in location_info:
                logger.error("‚ùå Brak danych lokalizacyjnych pomimo u≈ºycia location_data endpoint")
                return None
            
            # NOWE: Pobierz szczeg√≥≈Çowe dane ≈Çadowania dla obliczenia is_charging_ready
            charge_response = requests.get(
                f"https://fleet-api.prd.eu.vn.cloud.tesla.com/api/1/vehicles/{vehicle_id}/vehicle_data?endpoints=charge_state",
                headers=headers,
                timeout=30
            )
            
            charge_state = {}
            detailed_charge_data = {}
            if charge_response.status_code == 200:
                charge_data = charge_response.json().get('response', {})
                charge_state = charge_data.get('charge_state', {})
                # WyciƒÖgnij szczeg√≥≈Çowe dane ≈Çadowania potrzebne do is_charging_ready
                detailed_charge_data = {
                    'conn_charge_cable': charge_state.get('conn_charge_cable', 'Unknown'),
                    'charge_port_latch': charge_state.get('charge_port_latch', 'Unknown'),
                    'charge_port_door_open': charge_state.get('charge_port_door_open', False),
                    'charging_state': charge_state.get('charging_state', 'Unknown')
                }
            
            # WyciƒÖgnij poziom baterii i stan ≈Çadowania
            battery_level = charge_state.get('battery_level', 0)
            charging_state = charge_state.get('charging_state', 'Unknown')
            
            # NOWE: Oblicz is_charging_ready zgodnie z logikƒÖ z TeslaController
            conn_charge_cable = detailed_charge_data.get('conn_charge_cable', 'Unknown')
            is_charging_ready = (
                charging_state in ['Charging', 'Complete'] or
                conn_charge_cable not in ['Unknown', None, '', '<invalid>']
            )
            
            logger.info(f"üîå [SCOUT] Szczeg√≥≈Çy ≈Çadowania: charging_state={charging_state}, conn_charge_cable={conn_charge_cable}, is_charging_ready={is_charging_ready}")
            
            return {
                'vehicle_id': vehicle_id,
                'vin': vin,
                'state': vehicle_state,
                'latitude': location_info.get('latitude'),
                'longitude': location_info.get('longitude'),
                'battery_level': battery_level,
                'charging_state': charging_state,
                'is_charging_ready': is_charging_ready,  # NOWE: Dodane pole
                'detailed_charge_data': detailed_charge_data,  # NOWE: Szczeg√≥≈Çowe dane
                'timestamp': datetime.now(timezone.utc).isoformat()
            }
            
        elif vehicle_state == 'asleep':
            # Pojazd ≈õpi - zwr√≥ƒá ostatniƒÖ znanƒÖ lokalizacjƒô lub b≈ÇƒÖd
            logger.warning(f"‚ö†Ô∏è Pojazd {vin[-4:]} ≈õpi - brak dostƒôpu do aktualnej lokalizacji")
            logger.info("üí° Scout nie budzi pojazdu - to zadanie Worker Service")
            
            # Zwr√≥ƒá podstawowe informacje bez lokalizacji
            return {
                'vehicle_id': vehicle_id,
                'vin': vin,
                'state': vehicle_state,
                'latitude': None,
                'longitude': None,
                'timestamp': datetime.now(timezone.utc).isoformat(),
                'error': 'vehicle_asleep'
            }
            
        elif vehicle_state == 'offline':
            # Pojazd offline - brak po≈ÇƒÖczenia
            logger.warning(f"‚ö†Ô∏è Pojazd {vin[-4:]} offline - brak po≈ÇƒÖczenia")
            
            return {
                'vehicle_id': vehicle_id,
                'vin': vin,
                'state': vehicle_state,
                'latitude': None,
                'longitude': None,
                'timestamp': datetime.now(timezone.utc).isoformat(),
                'error': 'vehicle_offline'
            }
            
        else:
            # Nieznany stan pojazdu
            logger.error(f"‚ùå Nieznany stan pojazdu: {vehicle_state}")
            return None
        
    except Exception as e:
        logger.error(f"‚ùå B≈ÇƒÖd pobierania lokalizacji pojazdu: {e}")
        return None

def get_home_coordinates():
    """Pobiera wsp√≥≈Çrzƒôdne domu z Secret Manager z cachowaniem"""
    try:
        latitude = get_secret('home-latitude')
        longitude = get_secret('home-longitude') 
        radius = get_secret('home-radius')
        
        if not latitude or not longitude or not radius:
            logger.warning("‚ö†Ô∏è Brak sekret√≥w lokalizacji - u≈ºywam zmiennych ≈õrodowiskowych jako fallback")
            return HOME_LATITUDE_FALLBACK, HOME_LONGITUDE_FALLBACK, HOME_RADIUS_FALLBACK
            
        return float(latitude), float(longitude), float(radius)
        
    except Exception as e:
        logger.error(f"‚ùå B≈ÇƒÖd pobierania wsp√≥≈Çrzƒôdnych domu: {e} - fallback do zmiennych ≈õrodowiskowych")
        return HOME_LATITUDE_FALLBACK, HOME_LONGITUDE_FALLBACK, HOME_RADIUS_FALLBACK

def initialize_home_coordinates():
    """Inicjalizuje wsp√≥≈Çrzƒôdne domu z Secret Manager - wywo≈Çywane raz przy starcie Scout"""
    global HOME_LATITUDE, HOME_LONGITUDE, HOME_RADIUS
    
    # Je≈õli ju≈º zainicjalizowane, nie r√≥b nic
    if HOME_LATITUDE is not None:
        return
    
    try:
        logger.info("üè† Inicjalizujƒô wsp√≥≈Çrzƒôdne domu z Secret Manager...")
        
        latitude = get_secret('home-latitude')
        longitude = get_secret('home-longitude') 
        radius = get_secret('home-radius')
        
        if not latitude or not longitude or not radius:
            logger.warning("‚ö†Ô∏è Brak sekret√≥w lokalizacji - u≈ºywam zmiennych ≈õrodowiskowych jako fallback")
            HOME_LATITUDE = HOME_LATITUDE_FALLBACK
            HOME_LONGITUDE = HOME_LONGITUDE_FALLBACK
            HOME_RADIUS = HOME_RADIUS_FALLBACK
        else:
            HOME_LATITUDE = float(latitude)
            HOME_LONGITUDE = float(longitude)
            HOME_RADIUS = float(radius)
            logger.info(f"‚úÖ Wsp√≥≈Çrzƒôdne domu: lat={HOME_LATITUDE:.6f}, lon={HOME_LONGITUDE:.6f}, radius={HOME_RADIUS}")
        
    except Exception as e:
        logger.error(f"‚ùå B≈ÇƒÖd inicjalizacji wsp√≥≈Çrzƒôdnych domu: {e} - fallback do zmiennych ≈õrodowiskowych")
        HOME_LATITUDE = HOME_LATITUDE_FALLBACK
        HOME_LONGITUDE = HOME_LONGITUDE_FALLBACK
        HOME_RADIUS = HOME_RADIUS_FALLBACK

def is_at_home(latitude: float, longitude: float) -> bool:
    """Sprawdza czy pojazd jest w domu - u≈ºywa wsp√≥≈Çrzƒôdnych z Secret Manager"""
    if latitude is None or longitude is None:
        return False
    
    # U≈ºywaj globalnych zmiennych (zainicjalizowanych przy starcie)
    global HOME_LATITUDE, HOME_LONGITUDE, HOME_RADIUS
    
    # Oblicz odleg≈Ço≈õƒá (uproszczona formu≈Ça dla ma≈Çych odleg≈Ço≈õci)
    lat_diff = abs(latitude - HOME_LATITUDE)
    lon_diff = abs(longitude - HOME_LONGITUDE)
    distance = (lat_diff ** 2 + lon_diff ** 2) ** 0.5
    
    return distance <= HOME_RADIUS

def get_last_known_state(db: firestore.Client, vin: str) -> Optional[Dict[str, Any]]:
    """Pobiera ostatni znany stan pojazdu z Firestore"""
    try:
        doc_ref = db.collection('tesla_scout_state').document(vin)
        doc = doc_ref.get()
        
        if doc.exists:
            return doc.to_dict()
        return None
        
    except Exception as e:
        logger.error(f"‚ùå B≈ÇƒÖd pobierania stanu z Firestore: {e}")
        return None

def check_conditions_a_b(location_data: Dict[str, Any], last_state: Optional[Dict[str, Any]], vin: str) -> tuple[bool, str]:
    """
    Sprawdza Warunki A i B dla pojazdu ONLINE w lokalizacji HOME
    
    Args:
        location_data: Aktualne dane pojazdu
        last_state: Ostatni znany stan z Firestore
        vin: VIN pojazdu
        
    Returns:
        tuple: (trigger_worker: bool, reason: str)
    """
    
    is_charging_ready = location_data.get('is_charging_ready', False)
    battery_level = location_data.get('battery_level', 0)
    charging_state = location_data.get('charging_state', 'Unknown')
    
    # Pobierz ostatni stan ≈Çadowania
    was_charging_ready = last_state.get('is_charging_ready', False) if last_state else False
    was_online = last_state.get('online', False) if last_state else False
    was_at_home = last_state.get('at_home', False) if last_state else False
    
    logger.info(f"üîç [SCOUT] Sprawdzam Warunki A/B dla {vin[-4:]}: is_charging_ready={is_charging_ready}, charging_state={charging_state}, battery={battery_level}%")
    
    if is_charging_ready:
        # üîã WARUNEK A: Pojazd ONLINE + HOME + is_charging_ready=true
        logger.info(f"üîã [SCOUT] WARUNEK A - pojazd gotowy do ≈Çadowania w domu")
        logger.info(f"üìä [SCOUT] Dane: bateria={battery_level}%, ≈Çadowanie={charging_state}")
        
        # Sprawd≈∫ czy to zmiana stanu (dla logowania)
        if not (was_charging_ready and was_at_home and was_online):
            logger.info(f"üîã [SCOUT] Pierwsza detekcja Warunku A")
        else:
            logger.info(f"üîã [SCOUT] Warunek A aktywny - sprawdzenie harmonogram√≥w")
        
        # ZAWSZE wywo≈Çaj Worker dla Warunku A
        return True, "Warunek A - pojazd gotowy do ≈Çadowania w domu (OFF PEAK CHARGE API)"
    
    else:
        # ‚è≥ WARUNEK B: Pojazd ONLINE + HOME + is_charging_ready=false
        logger.info(f"‚è≥ [SCOUT] is_charging_ready=False - sprawdzam Warunek B")
        
        if was_charging_ready and was_at_home and was_online:
            # Zmiana z gotowego na niegotowy - rozpocznij monitoring
            logger.info(f"‚è≥ [SCOUT] WARUNEK B - zmiana z gotowego na niegotowy")
            logger.info(f"üìä [SCOUT] Rozpoczynam monitoring do stanu OFFLINE")
            return False, "Warunek B - zmiana na niegotowy, monitoring rozpoczƒôty"
        
        elif not was_charging_ready and was_at_home and was_online:
            # Pojazd nadal niegotowy - kontynuuj Warunek B (nie wywo≈Çuj Worker)
            logger.info(f"‚è≥ [SCOUT] Warunek B kontynuowany - pojazd nadal niegotowy")
            return False, "Warunek B - monitoring w toku"
        
        else:
            # Pierwsza detekcja niegotowego pojazdu w domu
            logger.info(f"‚è≥ [SCOUT] WARUNEK B - pierwsza detekcja niegotowego pojazdu w domu")
            return False, "Warunek B - pierwsza detekcja, monitoring rozpoczƒôty"
    
    return False, "Brak warunk√≥w A/B"

def save_current_state(db: firestore.Client, vin: str, location_data: Dict[str, Any], at_home: bool):
    """Zapisuje aktualny stan pojazdu do Firestore"""
    try:
        doc_ref = db.collection('tesla_scout_state').document(vin)
        
        # ROZSZERZONE: Zapisz dodatkowe dane o stanie ≈Çadowania
        state_data = {
            'vin': vin,
            'latitude': location_data.get('latitude'),
            'longitude': location_data.get('longitude'),
            'at_home': at_home,
            'last_check': location_data['timestamp'],
            'updated_at': firestore.SERVER_TIMESTAMP,
            # NOWE: Dodatkowe pola dla Warunk√≥w A/B
            'online': location_data.get('state') == 'online',
            'battery_level': location_data.get('battery_level', 0),
            'charging_state': location_data.get('charging_state', 'Unknown'),
            'is_charging_ready': location_data.get('is_charging_ready', False),
            'vehicle_state': location_data.get('state', 'unknown')
        }
        
        # Dodaj szczeg√≥≈Çowe dane ≈Çadowania je≈õli dostƒôpne
        if 'detailed_charge_data' in location_data:
            state_data['detailed_charge_data'] = location_data['detailed_charge_data']
        
        doc_ref.set(state_data)
        
    except Exception as e:
        logger.error(f"‚ùå B≈ÇƒÖd zapisywania stanu do Firestore: {e}")

def trigger_worker_service(reason: str, vehicle_data: Dict[str, Any]) -> bool:
    """Wywo≈Çuje Worker Service (Cloud Run) gdy potrzeba pe≈Çnej logiki"""
    try:
        if not WORKER_SERVICE_URL:
            logger.error("‚ùå Brak URL Worker Service")
            return False
        
        payload = {
            "trigger": "scout_detected_change",
            "reason": reason,
            "vehicle_data": vehicle_data,
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
        
        response = requests.post(
            f"{WORKER_SERVICE_URL}/run-cycle",
            json=payload,
            timeout=60,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            logger.info(f"‚úÖ Worker Service wywo≈Çany pomy≈õlnie: {reason}")
            return True
        else:
            logger.error(f"‚ùå B≈ÇƒÖd wywo≈Çania Worker Service: {response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå B≈ÇƒÖd wywo≈Çania Worker Service: {e}")
        return False

@functions_framework.http
def tesla_scout_main(request):
    """
    G≈Ç√≥wna funkcja Scout - sprawdza lokalizacjƒô pojazdu i wywo≈Çuje Worker w razie potrzeby
    """
    start_time = datetime.now(timezone.utc)
    logger.info(f"üîç [SCOUT] Rozpoczynam sprawdzenie lokalizacji pojazdu")
    
    # Diagnostyka konfiguracji
    logger.info(f"ÔøΩÔøΩ [SCOUT] PROJECT_ID: {PROJECT_ID}")
    logger.info(f"üîß [SCOUT] GOOGLE_CLOUD_PROJECT: {os.environ.get('GOOGLE_CLOUD_PROJECT', 'BRAK')}")
    logger.info(f"üîß [SCOUT] GCP_PROJECT: {os.environ.get('GCP_PROJECT', 'BRAK')}")
    
    try:
        # Inicjalizacja Firestore
        db = firestore.Client(project=PROJECT_ID)
        
        # Inicjalizacja wsp√≥≈Çrzƒôdnych domu
        initialize_home_coordinates()
        
        # Pobierz access token - Smart wrapper (Worker + fallback)
        access_token = get_tesla_access_token_smart()
        if not access_token:
            return {"error": "Nie mo≈ºna uzyskaƒá access token (Worker Service i fallback nie dzia≈ÇajƒÖ)"}, 401
        
        # Pobierz lokalizacjƒô pojazdu
        location_data = get_vehicle_location(access_token)
        if not location_data:
            return {"error": "Nie mo≈ºna pobraƒá danych pojazdu"}, 500
        
        vin = location_data['vin']
        vehicle_state = location_data.get('state', 'unknown')
        
        # Sprawd≈∫ czy pojazd jest online i ma lokalizacjƒô
        if location_data.get('error') in ['vehicle_asleep', 'vehicle_offline']:
            # Pojazd ≈õpi lub jest offline - to normalna sytuacja
            logger.info(f"‚ÑπÔ∏è Pojazd {vin[-4:]} w stanie {vehicle_state} - brak aktualnej lokalizacji")
            
            # Logowanie Scout dla pojazdu offline
            _log_scout_status(location_data, "offline_check")
            
            # Pobierz ostatni znany stan z Firestore
            db = firestore.Client(project=PROJECT_ID)
            last_state = get_last_known_state(db, vin)
            
            if last_state:
                current_at_home = last_state.get('at_home', False)
                logger.info(f"üìç U≈ºywam ostatniej znanej lokalizacji: {'w domu' if current_at_home else 'poza domem'}")
                
                # NOWE: Sprawd≈∫ czy to przej≈õcie OFFLINE w trakcie Warunku B
                was_at_home = last_state.get('at_home', False)
                was_charging_ready = last_state.get('is_charging_ready', False)
                was_online = last_state.get('online', False)
                
                if was_at_home and not was_charging_ready and was_online and vehicle_state == 'offline':
                    # Warunek B: pojazd by≈Ç niegotowy w domu i przeszed≈Ç OFFLINE
                    trigger_worker = True
                    reason = "Warunek B - pojazd OFFLINE, wybudzenie i sprawdzenie stanu"
                    logger.info(f"üò¥ [SCOUT] WARUNEK B OFFLINE - wywo≈Çujƒô Worker dla wybudzenia")
                    print(f"üò¥ [SCOUT] WARUNEK B OFFLINE - trigger_worker=True, reason='{reason}'")
                    
                    # Loguj szczeg√≥≈Çy przej≈õcia
                    _log_scout_status(location_data, "CONDITION_B_OFFLINE_DETECTED")
                
            else:
                # Brak danych historycznych - za≈Ç√≥≈º ≈ºe poza domem
                current_at_home = False
                logger.info("üìç Brak danych historycznych - zak≈Çadam lokalizacjƒô poza domem")
                
                # Zapisz stan jako unknown
                save_current_state(db, vin, {
                    'latitude': None,
                    'longitude': None,
                    'timestamp': datetime.now(timezone.utc).isoformat()
                }, False)
        else:
            # Pojazd online - sprawd≈∫ aktualnƒÖ lokalizacjƒô
            current_at_home = is_at_home(location_data['latitude'], location_data['longitude'])
            logger.info(f"üìç Aktualna lokalizacja: {'w domu' if current_at_home else 'poza domem'}")
            
            # JEDYNE logowanie Scout dla pojazdu online (usuniƒôto duplikat)
            _log_scout_status(location_data, "online_check")
            
            # Zapisz aktualny stan
            db = firestore.Client(project=PROJECT_ID)
            save_current_state(db, vin, location_data, current_at_home)
        
        # Pobierz ostatni znany stan do por√≥wnania
        last_state = get_last_known_state(db, vin)
        

        
        # ===== NOWA LOGIKA: Sprawd≈∫ Warunki A i B =====
        # NAPRAWKA: Nie resetuj trigger_worker je≈õli zosta≈Ç ju≈º ustawiony w sekcji offline
        if 'trigger_worker' not in locals():
            trigger_worker = False
        if 'reason' not in locals() or not reason:
            reason = ""
        
        # DEBUG: Loguj stan zmiennych po inicjalizacji
        if trigger_worker:
            logger.info(f"üîç [DEBUG] Po inicjalizacji zmiennych: trigger_worker=True, reason='{reason}'")
            print(f"üîç [DEBUG] Po inicjalizacji: trigger_worker zachowany jako True")
        
        if last_state is None:
            # Pierwsza inicjalizacja - wywo≈Çaj Worker dla inicjalizacji
            trigger_worker = True
            reason = "Pierwsza inicjalizacja Scout"
            logger.info(f"üîç [SCOUT] {reason} - wywo≈Çujƒô Worker")
            print(f"üîç [SCOUT] {reason}")
            
        elif vehicle_state == 'online' and current_at_home:
            # NOWE: Pojazd ONLINE i w domu - sprawd≈∫ Warunki A i B
            conditions_trigger, conditions_reason = check_conditions_a_b(location_data, last_state, vin)
            if conditions_trigger:
                trigger_worker = True
                reason = conditions_reason
                
                # Specjalne logowanie dla wykrytych warunk√≥w
                if "Warunek A" in reason:
                    _log_scout_status(location_data, "CONDITION_A_DETECTED")
                elif "Warunek B" in reason:
                    _log_scout_status(location_data, "CONDITION_B_DETECTED")
            else:
                logger.info(f"üîÑ [SCOUT] {conditions_reason}")
                
        elif last_state.get('at_home') != current_at_home:
            # Zmiana stanu domu (poprzednia logika)
            if current_at_home:
                trigger_worker = True
                reason = "Pojazd wr√≥ci≈Ç do domu"
                logger.info(f"üè† [SCOUT] WYKRYTO POWR√ìT DO DOMU - wywo≈Çujƒô Worker")
                # Loguj szczeg√≥≈Çy zmiany
                _log_scout_status(location_data, "HOME_RETURN_DETECTED")
            else:
                # Wyjazd z domu - nie wywo≈Çujemy Worker, tylko logujemy
                logger.info(f"üöó [SCOUT] Pojazd wyjecha≈Ç z domu - tylko logowanie")
                reason = "Pojazd wyjecha≈Ç z domu (tylko logowanie)"
                # Loguj szczeg√≥≈Çy wyjazdu
                _log_scout_status(location_data, "home_departure")
        
        # Wywo≈Çaj Worker je≈õli potrzeba
        worker_called = False
        if trigger_worker:
            worker_called = trigger_worker_service(reason, location_data)
        
        # NAPRAWKA: Zapisz aktualny stan NA KO≈ÉCU (po sprawdzeniu logiki Scout)
        # To zapewnia ≈ºe last_state zawiera rzeczywi≈õcie poprzedni stan, nie aktualny
        if vehicle_state == 'online':
            save_current_state(db, vin, location_data, current_at_home)
            logger.info(f"üíæ [SCOUT] Stan pojazdu online zapisany")
        elif vehicle_state == 'offline' and last_state and last_state.get('online', False):
            # NAPRAWKA: Zapisz stan offline TYLKO gdy pojazd przechodzi z online na offline
            # Unikamy marnowania zasob√≥w przy ka≈ºdym sprawdzeniu offline co 15 min
            offline_state_data = {
                'vin': vin,
                'latitude': None,
                'longitude': None,
                'at_home': current_at_home,  # U≈ºywamy ostatniej znanej lokalizacji
                'last_check': location_data['timestamp'],
                'updated_at': firestore.SERVER_TIMESTAMP,
                'online': False,  # KLUCZOWE: Zapisz ≈ºe pojazd jest offline
                'battery_level': 0,  # Brak danych dla offline
                'charging_state': 'Unknown',
                'is_charging_ready': False,  # Offline = nie gotowy
                'vehicle_state': 'offline'
            }
            
            doc_ref = db.collection('tesla_scout_state').document(vin)
            doc_ref.set(offline_state_data)
            logger.info(f"üíæ [SCOUT] Stan offline zapisany po przej≈õciu online‚Üíoffline")
            print(f"üíæ [SCOUT] Przej≈õcie online‚Üíoffline zapisane dla {vin[-4:]}")
        
        # Przygotuj odpowied≈∫
        execution_time = (datetime.now(timezone.utc) - start_time).total_seconds()
        
        response = {
            "status": "success",
            "scout_execution_time_seconds": round(execution_time, 3),
            "vehicle": {
                "vin": vin,
                "state": vehicle_state,
                "at_home": current_at_home,
                "latitude": location_data.get('latitude'),
                "longitude": location_data.get('longitude'),
                "location_source": "current" if not location_data.get('error') else "last_known"
            },
            "state_change": {
                "detected": trigger_worker,
                "reason": reason,
                "worker_triggered": worker_called
            },
            "cost_optimization": {
                "scout_cost": "~0.01 groszy",
                "worker_avoided": not trigger_worker,
                "vehicle_wake_avoided": location_data.get('error') in ['vehicle_asleep', 'vehicle_offline']
            },
            "tesla_api_compliance": {
                "checked_vehicle_state": True,
                "avoided_wake_on_sleep": location_data.get('error') == 'vehicle_asleep',
                "best_practices": "Scout respects vehicle sleep state"
            },
            "timestamp": start_time.isoformat()
        }
        
        logger.info(f"‚úÖ [SCOUT] Zako≈Ñczono w {execution_time:.3f}s - Worker {'wywo≈Çany' if worker_called else 'nie wywo≈Çany'}")
        
        return response, 200
        
    except Exception as e:
        execution_time = (datetime.now(timezone.utc) - start_time).total_seconds()
        logger.error(f"‚ùå [SCOUT] B≈ÇƒÖd: {e}")
        
        return {
            "status": "error",
            "error": str(e),
            "scout_execution_time_seconds": round(execution_time, 3),
            "timestamp": start_time.isoformat()
        }, 500

if __name__ == "__main__":
    # Test lokalny
    class MockRequest:
        pass
    
    result, status = tesla_scout_main(MockRequest())
    print(f"Status: {status}")
    print(f"Response: {json.dumps(result, indent=2)}") 