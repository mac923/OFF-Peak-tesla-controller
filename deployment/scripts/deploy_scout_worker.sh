#!/bin/bash

# Deploy script dla architektury "Scout & Worker"
# AGRESYWNA OPTYMALIZACJA KOSZT√ìW:
# - Scout Function: lekka, tania, czƒôsta (co 15 min)
# - Worker Service: ciƒô≈ºka, droga, rzadka (2-3x dziennie)

set -e

echo "üöÄ === WDRO≈ªENIE ARCHITEKTURY SCOUT & WORKER ===="
echo "üí∞ AGRESYWNA OPTYMALIZACJA KOSZT√ìW:"
echo "   üîç Scout Function: ~1 grosz dziennie (96 wywo≈Ça≈Ñ x 0.01 groszy)"
echo "   üîß Worker Service: ~20 groszy dziennie (4 wywo≈Çania x 5 groszy)"
echo "   üíµ ≈ÅƒÑCZNY KOSZT: ~20 groszy dziennie (vs obecne 6 z≈Ç)"
echo "   üìä OSZCZƒòDNO≈öƒÜ: ~96% redukcja koszt√≥w"
echo ""

# Sprawd≈∫ czy PROJECT_ID jest ustawiony
if [ -z "$GOOGLE_CLOUD_PROJECT" ]; then
    echo "‚ùå B≈ÇƒÖd: Ustaw zmiennƒÖ GOOGLE_CLOUD_PROJECT"
    echo "Przyk≈Çad: export GOOGLE_CLOUD_PROJECT=your-project-id"
    exit 1
fi

PROJECT_ID=$GOOGLE_CLOUD_PROJECT
echo "üìã Projekt: $PROJECT_ID"

# Sprawd≈∫ czy gcloud jest zalogowany
if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q .; then
    echo "‚ùå B≈ÇƒÖd: Zaloguj siƒô do gcloud"
    echo "Wykonaj: gcloud auth login"
    exit 1
fi

echo "‚úÖ U≈ºytkownik zalogowany do gcloud"

# Ustaw domy≈õlny projekt
gcloud config set project $PROJECT_ID

# W≈ÇƒÖcz wymagane API
echo ""
echo "üîß W≈ÇƒÖczanie wymaganych API..."
gcloud services enable cloudbuild.googleapis.com
gcloud services enable run.googleapis.com
gcloud services enable cloudfunctions.googleapis.com
gcloud services enable cloudscheduler.googleapis.com
gcloud services enable secretmanager.googleapis.com
gcloud services enable storage.googleapis.com
gcloud services enable firestore.googleapis.com
echo "‚úÖ API w≈ÇƒÖczone"

# Sprawd≈∫ czy sekrety istniejƒÖ
echo ""
echo "üîê Sprawdzanie sekret√≥w..."
REQUIRED_SECRETS=(
    "tesla-client-id"
    "tesla-client-secret"
    "tesla-refresh-token"
    "tesla-private-key"
    "OFF_PEAK_CHARGE_API_KEY"
    "WORKER_SERVICE_URL"
)

for secret in "${REQUIRED_SECRETS[@]}"; do
    if gcloud secrets describe $secret >/dev/null 2>&1; then
        echo "‚úÖ Sekret '$secret' istnieje"
    else
        echo "‚ùå Sekret '$secret' nie istnieje"
        echo "üí° Utw√≥rz sekret: gcloud secrets create $secret --data-file=-"
        exit 1
    fi
done

# === KROK 1: WDRO≈ªENIE SCOUT FUNCTION ===
echo ""
echo "üîç === WDRA≈ªANIE SCOUT FUNCTION (LEKKA, TANIA) ==="

# KROK 1.1: Usuniƒôcie przestarza≈Çego kopiowania plik√≥w.
# Skrypt bƒôdzie teraz wdra≈ºa≈Ç bezpo≈õrednio z katalogu scout_function_deploy,
# kt√≥ry zawiera ju≈º poprawiony main.py i odpowiednie zale≈ºno≈õci.
#
# usuniƒôto:
# mkdir -p scout_function_deploy
# cp tesla_scout_function.py scout_function_deploy/main.py
# cp requirements_scout.txt scout_function_deploy/requirements.txt

# Wdra≈ºaj Scout Function
echo "üîç Wdra≈ºanie Scout Function z katalogu 'scout_function_deploy'..."
gcloud functions deploy tesla-scout \
    --gen2 \
    --runtime=python311 \
    --region=europe-west1 \
    --source=scout_function_deploy \
    --entry-point=tesla_scout_main \
    --trigger-http \
    --no-allow-unauthenticated \
    --memory=256MB \
    --timeout=60s \
    --max-instances=1 \
    --min-instances=0 \
    --set-env-vars="GOOGLE_CLOUD_PROJECT=$PROJECT_ID,HOME_LATITUDE=52.334215,HOME_LONGITUDE=20.937516,HOME_RADIUS=0.03" \
    --service-account="$PROJECT_ID@appspot.gserviceaccount.com"

# Pobierz URL Scout Function
SCOUT_FUNCTION_URL=$(gcloud functions describe tesla-scout --region=europe-west1 --format="value(serviceConfig.uri)")
echo "‚úÖ Scout Function wdro≈ºona: $SCOUT_FUNCTION_URL"

# === KROK 2: WDRO≈ªENIE WORKER SERVICE ===
echo ""
echo "üîß === WDRA≈ªANIE WORKER SERVICE (CIƒò≈ªKA, DROGA, RZADKA) ==="

# Buduj obraz Worker (u≈ºywamy Dockerfile.worker)
echo "üèóÔ∏è Budowanie obrazu Worker..."
gcloud builds submit --config=deployment/docker/cloudbuild-worker.yaml .

# ZastƒÖp placeholders w konfiguracji Worker
sed "s/YOUR_PROJECT_ID/$PROJECT_ID/g" deployment/cloud/cloud-run-worker.yaml > cloud-run-service-worker-filled.yaml

# Wdra≈ºaj Worker Service
echo "üîß Wdra≈ºanie Worker Service..."
gcloud run services replace cloud-run-service-worker-filled.yaml --region=europe-west1

# Pobierz URL Worker Service
WORKER_SERVICE_URL=$(gcloud run services describe tesla-worker --region=europe-west1 --format="value(status.url)")
echo "‚úÖ Worker Service wdro≈ºona: $WORKER_SERVICE_URL"

# === KROK 3: AKTUALIZACJA SCOUT FUNCTION Z URL WORKER ===
echo ""
echo "üîó Aktualizacja Scout Function z URL Worker Service..."

# KROK 3.1: Usuniƒôcie przestarza≈Çego kopiowania plik√≥w przy aktualizacji.
#
# usuniƒôto:
# mkdir -p scout_function_deploy
# cp tesla_scout_function.py scout_function_deploy/main.py
# cp requirements_scout.txt scout_function_deploy/requirements.txt

gcloud functions deploy tesla-scout \
    --gen2 \
    --runtime=python311 \
    --region=europe-west1 \
    --source=src/scout \
    --entry-point=tesla_scout_main \
    --trigger-http \
    --no-allow-unauthenticated \
    --memory=256MB \
    --timeout=60s \
    --max-instances=1 \
    --min-instances=0 \
    --set-env-vars="GOOGLE_CLOUD_PROJECT=$PROJECT_ID,HOME_LATITUDE=52.334215,HOME_LONGITUDE=20.937516,HOME_RADIUS=0.03,WORKER_SERVICE_URL=$WORKER_SERVICE_URL" \
    --service-account="$PROJECT_ID@appspot.gserviceaccount.com"

echo "‚úÖ Scout Function zaktualizowana z URL Worker Service"

# usuniƒôto:
# rm -rf scout_function_deploy

# === KROK 4: KONFIGURACJA UPRAWNIE≈É ===
echo ""
echo "üîê Konfiguracja uprawnie≈Ñ..."

# Utw√≥rz service account dla Cloud Scheduler (je≈õli nie istnieje)
if ! gcloud iam service-accounts describe tesla-scout-scheduler@$PROJECT_ID.iam.gserviceaccount.com >/dev/null 2>&1; then
    gcloud iam service-accounts create tesla-scout-scheduler \
        --display-name="Tesla Scout Scheduler" \
        --description="Service account for Cloud Scheduler to invoke Scout and Worker"
fi

# Uprawnienia dla Scout Function
gcloud functions add-iam-policy-binding tesla-scout \
    --region=europe-west1 \
    --member="serviceAccount:tesla-scout-scheduler@$PROJECT_ID.iam.gserviceaccount.com" \
    --role="roles/cloudfunctions.invoker"

# Uprawnienia dla Worker Service
gcloud run services add-iam-policy-binding tesla-worker \
    --member="serviceAccount:tesla-scout-scheduler@$PROJECT_ID.iam.gserviceaccount.com" \
    --role="roles/run.invoker" \
    --region=europe-west1

# Uprawnienia dla Scout Function do wywo≈Çywania Worker Service
gcloud run services add-iam-policy-binding tesla-worker \
    --member="serviceAccount:$PROJECT_ID@appspot.gserviceaccount.com" \
    --role="roles/run.invoker" \
    --region=europe-west1

echo "‚úÖ Uprawnienia skonfigurowane"

# === KROK 5: KONFIGURACJA CLOUD SCHEDULER ===
echo ""
echo "üìÖ Konfiguracja Cloud Scheduler..."

# ZastƒÖp placeholders w konfiguracji scheduler
sed -e "s/YOUR_PROJECT_ID/$PROJECT_ID/g" \
    -e "s|YOUR_SCOUT_FUNCTION_URL|$SCOUT_FUNCTION_URL|g" \
    -e "s|YOUR_WORKER_SERVICE_URL|$WORKER_SERVICE_URL|g" \
    deployment/cloud/scheduler-scout-worker.yaml > cloud-scheduler-scout-worker-filled.yaml

# Utw√≥rz region dla Cloud Scheduler je≈õli nie istnieje
gcloud app create --region=europe-west1 2>/dev/null || true

# Usu≈Ñ istniejƒÖce jobs (je≈õli istniejƒÖ)
gcloud scheduler jobs delete tesla-scout-location-check --location=europe-west1 --quiet 2>/dev/null || true
gcloud scheduler jobs delete tesla-worker-daily-check --location=europe-west1 --quiet 2>/dev/null || true
gcloud scheduler jobs delete tesla-worker-emergency --location=europe-west1 --quiet 2>/dev/null || true

# Utw√≥rz Scout job (g≈Ç√≥wny harmonogram)
echo "üîç Tworzenie harmonogramu Scout (co 15 min)..."
gcloud scheduler jobs create http tesla-scout-location-check \
    --location=europe-west1 \
    --schedule="*/15 * * * *" \
    --time-zone="UTC" \
    --uri="$SCOUT_FUNCTION_URL" \
    --http-method=POST \
    --headers="Content-Type=application/json" \
    --message-body='{"trigger":"cloud_scheduler_scout","action":"check_location","frequency":"15min"}' \
    --oidc-service-account-email="tesla-scout-scheduler@$PROJECT_ID.iam.gserviceaccount.com" \
    --max-retry-attempts=2 \
    --max-retry-duration=60s \
    --min-backoff=5s \
    --max-backoff=15s \
    --attempt-deadline=30s \
    --description="Tesla Scout - lekka funkcja sprawdzajƒÖca lokalizacjƒô (koszt: ~0.01 groszy)"

# Utw√≥rz Worker failsafe job (nocne wybudzenie)
echo "üîß Tworzenie harmonogramu Worker failsafe (00:00 Europe/Warsaw)..."
gcloud scheduler jobs create http tesla-worker-daily-check \
    --location=europe-west1 \
    --schedule="0 0 * * *" \
    --time-zone="Europe/Warsaw" \
    --uri="$WORKER_SERVICE_URL/run-midnight-wake" \
    --http-method=POST \
    --headers="Content-Type=application/json" \
    --message-body='{"trigger":"cloud_scheduler_worker_failsafe","action":"midnight_wake_and_check","time":"00:00_Warsaw","force_full_check":true}' \
    --oidc-service-account-email="tesla-scout-scheduler@$PROJECT_ID.iam.gserviceaccount.com" \
    --max-retry-attempts=3 \
    --max-retry-duration=300s \
    --min-backoff=10s \
    --max-backoff=60s \
    --attempt-deadline=120s \
    --description="Tesla Worker - dzienny failsafe i nocne wybudzenie o 00:00 czasu warszawskiego"

# Utw√≥rz Worker emergency job (test tygodniowy)
echo "üîß Tworzenie harmonogramu Worker emergency (niedziela 12:00 UTC)..."
gcloud scheduler jobs create http tesla-worker-emergency \
    --location=europe-west1 \
    --schedule="0 12 * * 0" \
    --time-zone="UTC" \
    --uri="$WORKER_SERVICE_URL/run-cycle" \
    --http-method=POST \
    --headers="Content-Type=application/json" \
    --message-body='{"trigger":"cloud_scheduler_worker_emergency","action":"full_check","time":"12:00_UTC_Sunday","force_full_check":true,"reason":"weekly_emergency_test"}' \
    --oidc-service-account-email="tesla-scout-scheduler@$PROJECT_ID.iam.gserviceaccount.com" \
    --max-retry-attempts=2 \
    --max-retry-duration=180s \
    --min-backoff=10s \
    --max-backoff=30s \
    --attempt-deadline=90s \
    --description="Tesla Worker - awaryjne wywo≈Çanie pe≈Çnej logiki (test tygodniowy)"

echo "‚úÖ Cloud Scheduler jobs utworzone"

# Wyczy≈õƒá pliki tymczasowe
rm -f cloud-run-service-worker-filled.yaml cloud-scheduler-scout-worker-filled.yaml

echo ""
echo "üéâ === WDRO≈ªENIE SCOUT & WORKER ZAKO≈ÉCZONE POMY≈öLNIE ==="
echo ""
echo "üí∞ AGRESYWNA OPTYMALIZACJA KOSZT√ìW AKTYWNA:"
echo "   üîç Scout Function: Sprawdza lokalizacjƒô co 15 min (~1 grosz/dzie≈Ñ)"
echo "   üîß Worker Service: Pe≈Çna logika 2-3x dziennie (~20 groszy/dzie≈Ñ)"
echo "   üíµ ≈ÅƒÑCZNY KOSZT: ~20 groszy dziennie (vs 6 z≈Ç poprzednio)"
echo "   üìä OSZCZƒòDNO≈öƒÜ: ~96% redukcja koszt√≥w!"
echo ""
echo "üèóÔ∏è ARCHITEKTURA:"
echo "   üìÖ Scout sprawdza lokalizacjƒô co 15 min"
echo "   üè† Gdy pojazd wraca do domu ‚Üí Scout wywo≈Çuje Worker"
echo "   üîß Worker wykonuje pe≈ÇnƒÖ logikƒô z Tesla HTTP Proxy"
echo "   üåô Worker failsafe: nocne wybudzenie o 00:00 czasu warszawskiego (Europe/Warsaw)"
echo ""
echo "üîó ENDPOINTS:"
echo "   Scout Function: $SCOUT_FUNCTION_URL"
echo "   Worker Service: $WORKER_SERVICE_URL"
echo ""
echo "üéØ HARMONOGRAM:"
echo "   üîç Scout: Co 15 minut (96x dziennie)"
echo "   üîß Worker: 2-3x gdy Scout wykryje powr√≥t + 1x failsafe"
echo "   üß™ Emergency: Niedziela 12:00 UTC (test)"
echo ""
echo "üìä MONITORING:"
echo "   Scout status: curl $SCOUT_FUNCTION_URL"
echo "   Worker status: curl $WORKER_SERVICE_URL/worker-status"
echo "   Worker health: curl $WORKER_SERVICE_URL/health"
echo ""
echo "üîÑ POWR√ìT DO STAREJ WERSJI:"
echo "   Je≈õli potrzebujesz wr√≥ciƒá do poprzedniej wersji:"
echo "   ./deploy_optimized.sh  # Wdro≈ºy poprzedniƒÖ stabilnƒÖ wersjƒô"
echo ""
echo "üöÄ Architektura Scout & Worker jest gotowa do u≈ºycia!" 