# Smart Dockerfile dla Cloud Tesla Monitor z Tesla HTTP Proxy Smart Mode
# Uruchamia aplikację bez proxy, ale proxy może być uruchomiony on-demand

FROM golang:1.23-alpine AS proxy-builder

# Zainstaluj wymagane narzędzia dla buildu Tesla HTTP Proxy
RUN apk add --no-cache git

# Pobierz i zbuduj Tesla HTTP Proxy
RUN git clone https://github.com/teslamotors/vehicle-command.git /tmp/vehicle-command
WORKDIR /tmp/vehicle-command/cmd/tesla-http-proxy
RUN go build -o tesla-http-proxy .

# Główny obraz Python
FROM python:3.11-slim

# Zainstaluj wymagane narzędzia systemowe
RUN apt-get update && apt-get install -y \
    openssl \
    ca-certificates \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Skopiuj Tesla HTTP Proxy z buildera
COPY --from=proxy-builder /tmp/vehicle-command/cmd/tesla-http-proxy/tesla-http-proxy /usr/local/bin/

# Ustaw katalog roboczy
WORKDIR /app

# Skopiuj pliki wymagań
COPY requirements_cloud.txt .

# Zainstaluj zależności Python
RUN pip install --no-cache-dir -r requirements_cloud.txt

# Skopiuj główne pliki aplikacji
COPY cloud_tesla_monitor.py .
COPY tesla_controller.py .
COPY tesla_fleet_api_client.py .

# Skopiuj Smart startup script
COPY startup_smart.sh .
RUN chmod +x startup_smart.sh

# Utwórz puste pliki fallback dla opcjonalnych konfiguracji
RUN touch fleet_tokens.json private-key.pem

# Ustaw zmienne środowiskowe
ENV PYTHONUNBUFFERED=True
ENV PORT=8080
ENV NODE_ENV=production

# Smart Proxy Mode
ENV TESLA_SMART_PROXY_MODE=true
ENV TESLA_PROXY_AVAILABLE=true
ENV TESLA_HTTP_PROXY_HOST=localhost
ENV TESLA_HTTP_PROXY_PORT=4443

# Utwórz użytkownika bez uprawnień administratora
RUN useradd --create-home --shell /bin/bash app \
    && chown -R app:app /app
USER app

# Otwórz porty dla aplikacji i proxy
EXPOSE 8080 4443

# Komenda uruchamiająca - Smart startup script
CMD ["./startup_smart.sh"] 